Test Taker,Ability Estimate,Wrong Answered Questions,Weak Sub Topic,Weak Topic,Previous Recommendations
bsv-1-c-programming,2.96,"377: What will be the output of the program in 16 bit platform (Turbo C under DOS)? #include<stdio.h>  int main() {     int fun();     int i;     i = fun();     printf(""%d\\n"", i);     return 0; } int fun() {     _AX = 1990; } [Options: A: Garbage value | B: 0 (Zero) | C: 1990 | D: No output] [Chosen: A]||426: What will be the output of the program ? #include<stdio.h>  void fun(void *p); int i;  int main() {     void *vptr;     vptr = &i;     fun(vptr);     return 0; } void fun(void *p) {     int **q;     q = (int**)&p;     printf(""%d\\n"", **q); } [Options: A: Error: cannot convert from void** to int** | B: Garbage value | C: 0 | D: No output] [Chosen: A]||429: What will be the output of the program if the size of pointer is 4-bytes? #include<stdio.h>  int main() {     printf(""%d, %d\\n"", sizeof(NULL), sizeof(""""));     return 0; } [Options: A: 2, 1 | B: 2, 2 | C: 4, 1 | D: 4, 2] [Chosen: B]||497: What will be the output of the program (Turbo C in 16 bit platform DOS) ? #include<stdio.h> #include<string.h>  int main() {     char *str1 = ""India"";     char *str2 = ""BIX"";     char *str3;     str3 = strcat(str1, str2);     printf(""%s %s\\n"", str3, str1);     return 0; } [Options: A: IndiaBIX India | B: IndiaBIX IndiaBIX | C: India India | D: Error] [Chosen: A]||498: If the size of pointer is 4 bytes then What will be the output of the program ? #include<stdio.h>  int main() {     char *str[] = {""Frogs"", ""Do"", ""Not"", ""Die"", ""They"", ""Croak!""};     printf(""%d, %d"", sizeof(str), strlen(str[0]));     return 0; } [Options: A: 22, 4 | B: 25, 5 | C: 24, 5 | D: 20, 2] [Chosen: B]","pointers,strings,functions",c programming,"Here are 5 personalized learning recommendations for bsv-1-c-programming, focusing on C programming, specifically pointers, strings, and functions:

1. **Understanding C Pointers:** Pointers can be tricky, but they are fundamental to C. This video explains the concept clearly, covering declaration, initialization, and dereferencing.  It also touches upon pointer arithmetic which is crucial for understanding how pointers work with arrays and strings.
    * **Topic:** Pointers
    * **Video:** [https://www.youtube.com/watch?v=zuegQmMdy8M&t=9s](https://www.youtube.com/watch?v=zuegQmMdy8M&t=9s)


2. **Working with Strings in C:**  Strings in C are essentially character arrays terminated by a null character. This video explains how to declare, initialize, manipulate, and use common string functions. Understanding string manipulation is essential for many C programs.
    * **Topic:** Strings
    * **Video:** [https://www.youtube.com/watch?v=Bjzfag1zZ_0](https://www.youtube.com/watch?v=Bjzfag1zZ_0)


3. **C Functions - Deep Dive:** Functions are the building blocks of modular programming. This tutorial explains function definition, declaration, parameters, return values, and scope, helping you write cleaner and more organized code.
    * **Topic:** Functions
    * **Video:** [https://www.youtube.com/watch?v=9EcfRMm4b3E](https://www.youtube.com/watch?v=9EcfRMm4b3E)


4. **Pointers and Arrays in C:** This video explores the close relationship between pointers and arrays in C. It explains how arrays decay into pointers, how pointer arithmetic can be used to access array elements, and the implications for dynamic memory allocation.
    * **Topic:** Pointers and Arrays
    * **Video:** [https://www.youtube.com/watch?v=t5NszbIerYc](https://www.youtube.com/watch?v=t5NszbIerYc)


5. **Function Pointers in C:**  Function pointers are a powerful feature in C that allow you to pass"
rty-1-c-programming,-1.93,"458: Is there any difference between the following two statements? char *p=0; char *t=NULL; [Options: A: Yes | B: No | C: Not Available | D: Not Available] [Chosen: A]||375: In which order do the following gets evaluated 1. Relational 2. Arithmetic 3. Logical 4. Assignment [Options: A: 2134 | B: 1234 | C: 4321 | D: 3214] [Chosen: B]||309: Identify which of the following are declarations 1 : extern int x; 2 : float square ( float x ) { ... } 3 : double pow(double, double); [Options: A: 1 | B: 2 | C: 1 and 3 | D: 3] [Chosen: A]||301: Which of the following statements should be used to obtain a remainder after dividing 3.14 by 2.1 ? [Options: A: rem = 3.14 % 2.1; | B: rem = modf(3.14, 2.1); | C: rem = fmod(3.14, 2.1); | D: Remainder cannot be obtain in floating point division.] [Chosen: B]||511: Which of the following statements are correct about the program below? #include<stdio.h>  int main() {     char str[20], *s;     printf(""Enter a string\\n"");     scanf(""%s"", str);     s=str;     while(*s != '\\0')     {         if(*s >= 97 && *s <= 122)             *s = *s-32;         s++;     }     printf(""%s"",str);     return 0; } [Options: A: The code converts a string in to an integer | B: The code converts lower case character to upper case | C: The code converts upper case character to lower case | D: Error in code] [Chosen: A]||303: Which of the following special symbol allowed in a variable name? [Options: A: * (asterisk) | B: | (pipeline) | C: #NAME? | D: _ (underscore)] [Chosen: C]","pointers,expressions,strings,declarations and initializations",c programming,"Here are 5 personalized video recommendations to strengthen your C programming skills, focusing on pointers, expressions, strings, declarations, and initializations:

1. **Understanding C Pointers:** Pointers can be tricky. This video breaks down the concept in a clear and concise way, explaining how they work and why they're important.  It covers pointer arithmetic and dereferencing, which are crucial for understanding more complex C programs.
    * **Video:** [https://www.youtube.com/watch?v=zuegQmMdy8M&t=9s](https://www.youtube.com/watch?v=zuegQmMdy8M&t=9s)


2. **Mastering C Expressions:**  This tutorial explains different types of expressions in C, including arithmetic, logical, and relational operators. Understanding operator precedence and associativity is key to writing correct and efficient code. This video will help you solidify your understanding of how expressions are evaluated.
    * **Video:** [https://www.youtube.com/watch?v=_UWZUes5Q1s](https://www.youtube.com/watch?v=_UWZUes5Q1s)


3. **Working with Strings in C:** C strings can be challenging for beginners. This video provides a practical guide to working with strings, including string manipulation functions, character arrays, and the importance of the null terminator.  It also covers common string operations and potential pitfalls.
    * **Video:** [https://www.youtube.com/watch?v=Bjzfag1zZ_0](https://www.youtube.com/watch?v=Bjzfag1zZ_0)


4. **Declarations and Initializations in C:**  This video clarifies the nuances of variable declarations and initializations in C. It explains different data types, storage classes, and the scope of variables.  Proper declaration and initialization are essential for avoiding errors and writing clean, maintainable code.
    * **Video:** [https://www.youtube.com/watch?v=9Ac4tXAa27c](https://www.youtube.com/watch?v=9Ac4tXAa27c)


5. **Combining Pointers and Arrays:** This tutorial delves into the relationship between pointers and arrays in C. It explains how arrays decay into pointers and how pointer"
rty-2-c-programming,-2.96,"303: Which of the following special symbol allowed in a variable name? [Options: A: * (asterisk) | B: | (pipeline) | C: #NAME? | D: _ (underscore)] [Chosen: A]||707: Which of the following sentences are correct about a switch loop in a C program? 1: switch is useful when we wish to check the value of variable against a particular set of values. 2: switch is useful when we wish to check whether a value falls in different ranges. 3: Compiler implements a jump table for cases used in switch. 4: It is not necessary to use a break in every switch statement. [Options: A: 1,2 | B: 1,3,4 | C: 2,4 | D: 2] [Chosen: C]||446: Which of the following statements correctly declare a function that receives a pointer to pointer to a pointer to a float and returns a pointer to a pointer to a pointer to a pointer to a float? [Options: A: float **fun(float***); | B: float *fun(float**); | C: float fun(float***); | D: float ****fun(float***);] [Chosen: C]||512: Which of the following statements are correct about the below declarations? char *p = ""Sanjay""; char a[] = ""Sanjay""; 1: There is no difference in the declarations and both serve the same purpose. 2: p is a non-const pointer pointing to a non-const string, whereas a is a const pointer pointing to a non-const pointer. 3: The pointer p can be modified to point to another string, whereas the individual characters within array a can be changed. 4: In both cases the '\\0' will be added at the end of the string ""Sanjay"". [Options: A: 1, 2 | B: 2, 3, 4 | C: 3, 4 | D: 2, 3] [Chosen: A]||699: Which of the following statements are correct about the below program? #include<stdio.h> int main() {     int i = 10, j = 20;     if(i = 5) && if(j = 10)         printf(""Have a nice day"");     return 0; } [Options: A: Output: Have a nice day | B: No output | C: Error: Expression syntax | D: Error: Undeclared identifier if] [Chosen: B]||798: Which of the following statements mentioning the name of the array begins DOES NOT yield the base address? 1: When array name is used with the sizeof operator. 2: When array name is operand of the & operator. 3: When array name is passed to scanf() function. 4: When array name is passed to printf() function. [Options: A: A | B: A, B | C: B | D: B, D] [Chosen: A]","control instructions,pointers,strings,arrays,declarations and initializations",c programming,None
rty-3-c-programming,-3.0,"707: Which of the following sentences are correct about a switch loop in a C program? 1: switch is useful when we wish to check the value of variable against a particular set of values. 2: switch is useful when we wish to check whether a value falls in different ranges. 3: Compiler implements a jump table for cases used in switch. 4: It is not necessary to use a break in every switch statement. [Options: A: 1,2 | B: 1,3,4 | C: 2,4 | D: 2] [Chosen: A]||446: Which of the following statements correctly declare a function that receives a pointer to pointer to a pointer to a float and returns a pointer to a pointer to a pointer to a pointer to a float? [Options: A: float **fun(float***); | B: float *fun(float**); | C: float fun(float***); | D: float ****fun(float***);] [Chosen: B]||512: Which of the following statements are correct about the below declarations? char *p = ""Sanjay""; char a[] = ""Sanjay""; 1: There is no difference in the declarations and both serve the same purpose. 2: p is a non-const pointer pointing to a non-const string, whereas a is a const pointer pointing to a non-const pointer. 3: The pointer p can be modified to point to another string, whereas the individual characters within array a can be changed. 4: In both cases the '\\0' will be added at the end of the string ""Sanjay"". [Options: A: 1, 2 | B: 2, 3, 4 | C: 3, 4 | D: 2, 3] [Chosen: A]||699: Which of the following statements are correct about the below program? #include<stdio.h> int main() {     int i = 10, j = 20;     if(i = 5) && if(j = 10)         printf(""Have a nice day"");     return 0; } [Options: A: Output: Have a nice day | B: No output | C: Error: Expression syntax | D: Error: Undeclared identifier if] [Chosen: A]||518: Which of the following function is more appropriate for reading in a multi-word string? [Options: A: printf(); | B: scanf(); | C: gets(); | D: puts();] [Chosen: A]||373: Which of the following is the correct order if calling functions in the below code? a = f1(23, 14) * f2(12/4) + f3(); [Options: A: f1, f2, f3 | B: f3, f2, f1 | C: Order may vary from compiler to compiler | D: None of above] [Chosen: A]||373: Which of the following is the correct order if calling functions in the below code? a = f1(23, 14) * f2(12/4) + f3(); [Options: A: f1, f2, f3 | B: f3, f2, f1 | C: Order may vary from compiler to compiler | D: None of above] [Chosen: A]","strings,control instructions,pointers,expressions",c programming,None
rty-3-c-programming,-3.0,"707: Which of the following sentences are correct about a switch loop in a C program? 1: switch is useful when we wish to check the value of variable against a particular set of values. 2: switch is useful when we wish to check whether a value falls in different ranges. 3: Compiler implements a jump table for cases used in switch. 4: It is not necessary to use a break in every switch statement. [Options: A: 1,2 | B: 1,3,4 | C: 2,4 | D: 2] [Chosen: A]||446: Which of the following statements correctly declare a function that receives a pointer to pointer to a pointer to a float and returns a pointer to a pointer to a pointer to a pointer to a float? [Options: A: float **fun(float***); | B: float *fun(float**); | C: float fun(float***); | D: float ****fun(float***);] [Chosen: B]||512: Which of the following statements are correct about the below declarations? char *p = ""Sanjay""; char a[] = ""Sanjay""; 1: There is no difference in the declarations and both serve the same purpose. 2: p is a non-const pointer pointing to a non-const string, whereas a is a const pointer pointing to a non-const pointer. 3: The pointer p can be modified to point to another string, whereas the individual characters within array a can be changed. 4: In both cases the '\\0' will be added at the end of the string ""Sanjay"". [Options: A: 1, 2 | B: 2, 3, 4 | C: 3, 4 | D: 2, 3] [Chosen: A]||699: Which of the following statements are correct about the below program? #include<stdio.h> int main() {     int i = 10, j = 20;     if(i = 5) && if(j = 10)         printf(""Have a nice day"");     return 0; } [Options: A: Output: Have a nice day | B: No output | C: Error: Expression syntax | D: Error: Undeclared identifier if] [Chosen: A]||518: Which of the following function is more appropriate for reading in a multi-word string? [Options: A: printf(); | B: scanf(); | C: gets(); | D: puts();] [Chosen: A]||373: Which of the following is the correct order if calling functions in the below code? a = f1(23, 14) * f2(12/4) + f3(); [Options: A: f1, f2, f3 | B: f3, f2, f1 | C: Order may vary from compiler to compiler | D: None of above] [Chosen: A]","strings,control instructions,pointers,expressions",c programming,"Here are 5 personalized recommendations for rty-3-c-programming, focusing on C programming weaknesses in strings, control instructions, pointers, and expressions:

1. **Understanding C Strings:** C strings can be tricky. This video explains how they work, covering character arrays, null terminators, and common string functions.  It's crucial for mastering string manipulation in C.
    * **Video:** [https://www.youtube.com/watch?v=zuegQmMdy8M](https://www.youtube.com/watch?v=zuegQmMdy8M) (C Programming Tutorial 8 - Strings)


2. **Mastering Control Flow in C:** Control flow dictates the order of execution. This tutorial explains `if`, `else`, `for`, and `while` statements, enabling you to write more complex and dynamic programs.  Practice these concepts to build your logic skills.
    * **Video:** [https://www.youtube.com/watch?v=kJ7eP9y-SDY](https://www.youtube.com/watch?v=kJ7eP9y-SDY&t=1s) (C Programming Tutorial 4 - Making Decisions)


3. **Demystifying Pointers in C:** Pointers are powerful but often confusing. This video breaks down pointer concepts, explaining how they work, how to use them, and why they're essential for dynamic memory allocation and data manipulation.
    * **Video:** [https://www.youtube.com/watch?v=zuegQmMdy8M&pp=ygUPYyBwb2ludGVycyB0dXRvcmlhbA%3D%3D](https://www.youtube.com/watch?v=zuegQmMdy8M&pp=ygUPYyBwb2ludGVycyB0dXRvcmlhbA%3D%3D) (C Programming Tutorial 9 - Pointers)


4. **C Expressions and Operators:** Understanding expressions and operators is fundamental. This video covers arithmetic, logical, and relational operators, explaining operator precedence and how to build complex expressions correctly.
    * **Video:** [https://www.youtube.com/watch?v=EjavYOFoJJ0](https://www.youtube.com/watch?v=E"
rty-4-c-programming,3.0,"377: What will be the output of the program in 16 bit platform (Turbo C under DOS)? #include<stdio.h>  int main() {     int fun();     int i;     i = fun();     printf(""%d\\n"", i);     return 0; } int fun() {     _AX = 1990; } [Options: A: Garbage value | B: 0 (Zero) | C: 1990 | D: No output] [Chosen: B]||463: What is (void*)0? [Options: A: Representation of NULL pointer | B: Representation of void pointer | C: Error | D: None of above] [Chosen: B]||497: What will be the output of the program (Turbo C in 16 bit platform DOS) ? #include<stdio.h> #include<string.h>  int main() {     char *str1 = ""India"";     char *str2 = ""BIX"";     char *str3;     str3 = strcat(str1, str2);     printf(""%s %s\\n"", str3, str1);     return 0; } [Options: A: IndiaBIX India | B: IndiaBIX IndiaBIX | C: India India | D: Error] [Chosen: A]||503: What will be the output of the program ? #include<stdio.h>  int main() {     char t;     char *p1 = ""India"", *p2;     p2=p1;     p1 = ""BIX"";     printf(""%s %s\\n"", p1, p2);     return 0; } [Options: A: India BIX | B: BIX India | C: India India | D: BIX BIX] [Chosen: A]","functions,strings,pointers",c programming,"Here are 5 personalized recommendations for rty-4-c-programming, focusing on improving your understanding of functions, strings, and pointers in C:

1. **Deep Dive into C Functions:** This video explores functions in detail, covering function definition, parameters, return values, and scope. Mastering functions is key to writing modular and reusable code.
    * **Video:** [https://www.youtube.com/watch?v=qMlnFwYdqIw](https://www.youtube.com/watch?v=qMlnFwYdqIw) (C Programming Tutorial - User Defined Functions)

2. **String Manipulation in C:**  This tutorial goes beyond the basics of strings, covering important functions like `strcpy`, `strcat`, `strlen`, and how to handle string input safely.  These skills are essential for practical C programming.
    * **Video:** [https://www.youtube.com/watch?v=Bjzfag1zZ_0](https://www.youtube.com/watch?v=Bjzfag1zZ_0) (C String functions: strcpy, strcat, strlen, strcmp)

3. **Pointers and Arrays in C:** This video explains the close relationship between pointers and arrays, demonstrating how to access array elements using pointers and pointer arithmetic. This is crucial for efficient data manipulation.
    * **Video:** [https://www.youtube.com/watch?v=t5NszbIerYc](https://www.youtube.com/watch?v=t5NszbIerYc) (Pointers and Arrays in C | C Programming Tutorial)

4. **Dynamic Memory Allocation in C:** Learn how to use `malloc`, `calloc`, `realloc`, and `free` to manage memory dynamically. This is essential for working with data structures and handling large datasets efficiently.
    * **Video:** [https://www.youtube.com/watch?v=_8-ht2AKyH4](https://www.youtube.com/watch?v=_8-ht2AKyH4) (Dynamic Memory Allocation in C (malloc, calloc, realloc, free))


5. **Function Pointers in C:** This advanced topic covers function pointers, explaining how to store and pass functions as arguments to other functions. This powerful technique enables flexible and dynamic code execution.
    * **Video"
rty-5-c-programming,2.64,"377: What will be the output of the program in 16 bit platform (Turbo C under DOS)? #include<stdio.h>  int main() {     int fun();     int i;     i = fun();     printf(""%d\\n"", i);     return 0; } int fun() {     _AX = 1990; } [Options: A: Garbage value | B: 0 (Zero) | C: 1990 | D: No output] [Chosen: B]||391: What will be the output of the program? #include<stdio.h>  int addmult(int ii, int jj) {     int kk, ll;     kk = ii + jj;     ll = ii * jj;     return (kk, ll); }  int main() {     int i=3, j=4, k, l;     k = addmult(i, j);     l = addmult(i, j);     printf(""%d, %d\\n"", k, l);     return 0; } [Options: A: 12, 12 | B: 7, 7 | C: 7, 12 | D: 12, 7] [Chosen: B]||426: What will be the output of the program ? #include<stdio.h>  void fun(void *p); int i;  int main() {     void *vptr;     vptr = &i;     fun(vptr);     return 0; } void fun(void *p) {     int **q;     q = (int**)&p;     printf(""%d\\n"", **q); } [Options: A: Error: cannot convert from void** to int** | B: Garbage value | C: 0 | D: No output] [Chosen: B]||335: A long double can be used if range of a double is not enough to accommodate a real number. [Options: A: TRUE | B: FALSE | C: Not Available | D: Not Available] [Chosen: B]||349: What will be the output of the program? #include<stdio.h> int main() {     int i=-3, j=2, k=0, m;     m = ++i || ++j && ++k;     printf(""%d, %d, %d, %d\\n"", i, j, k, m);     return 0; } [Options: A: 2, 2, 0, 1 | B: 1, 2, 1, 0 | C: -2, 2, 0, 0 | D: -2, 2, 0, 1] [Chosen: B]||305: How would you round off a value from 1.66 to 2.0? [Options: A: ceil(1.66) | B: floor(1.66) | C: roundup(1.66) | D: roundto(1.66)] [Chosen: B]","functions,expressions,declarations and initializations,pointers",c programming,None
vgh-1-c-programming,-3.0,"458: Is there any difference between the following two statements? char *p=0; char *t=NULL; [Options: A: Yes | B: No | C: Not Available | D: Not Available] [Chosen: A]||514: Which of the following statement is correct? [Options: A: strcmp(s1, s2) returns a number less than 0 if s1>s2 | B: strcmp(s1, s2) returns a number greater than 0 if s1<s2 | C: strcmp(s1, s2) returns 0 if s1==s2 | D: strcmp(s1, s2) returns 1 if s1==s2] [Chosen: B]||758: Which of the following are correctly formed #define statements in C? [Options: A: #define CUBE (X) (X*X*X); | B: #define CUBE(x) (X*X*X) | C: #define CUBE(X)(X*X*X) | D: #define CUBE(X) {X*X*X}] [Chosen: A]||739: Which of the following statement obtains the remainder on dividing 5.5 by 1.3 ? [Options: A: rem = (5.5 % 1.3) | B: rem = modf(5.5, 1.3) | C: rem = fmod(5.5, 1.3) | D: Error: we can't divide] [Chosen: D]||518: Which of the following function is more appropriate for reading in a multi-word string? [Options: A: printf(); | B: scanf(); | C: gets(); | D: puts();] [Chosen: A]||446: Which of the following statements correctly declare a function that receives a pointer to pointer to a pointer to a float and returns a pointer to a pointer to a pointer to a pointer to a float? [Options: A: float **fun(float***); | B: float *fun(float**); | C: float fun(float***); | D: float ****fun(float***);] [Chosen: B]||523: If the file 'source.txt' contains a line ""Be my friend"" which of the following will be the output of below program? #include<stdio.h>  int main() {     FILE *fs, *ft;     char c[10];     fs = fopen(""source.txt"", ""r"");     c[0] = getc(fs);     fseek(fs, 0, SEEK_END);     fseek(fs, -3L, SEEK_CUR);     fgets(c, 5, fs);     puts(c);     return 0; } [Options: A: friend | B: frien | C: end | D: Error in fseek();] [Chosen: B]||699: Which of the following statements are correct about the below program? #include<stdio.h> int main() {     int i = 10, j = 20;     if(i = 5) && if(j = 10)         printf(""Have a nice day"");     return 0; } [Options: A: Output: Have a nice day | B: No output | C: Error: Expression syntax | D: Error: Undeclared identifier if] [Chosen: A]","input / output,floating point issues,c preprocessor,pointers,strings,control instructions",c programming,"Here are 5 personalized recommendations for vgh-1-c-programming, focusing on identified weak areas in C programming:

1. **Input/Output:** Understanding how `printf` and `scanf` work is crucial. This video covers format specifiers, common pitfalls, and best practices.  It also introduces file I/O which builds upon these basic concepts.

   * **Recommendation:** C Programming Tutorial - Input and Output
   * **YouTube Link:** [https://www.youtube.com/watch?v=FLkOX4Eez6o](https://www.youtube.com/watch?v=FLkOX4Eez6o)


2. **Floating-Point Issues:** Floating-point numbers have limitations in precision.  This video explains why comparisons can be tricky and demonstrates strategies for robust floating-point arithmetic in C.

   * **Recommendation:**  Floating Point Numbers - Computerphile
   * **YouTube Link:** [https://www.youtube.com/watch?v=PZRI1IfStY0](https://www.youtube.com/watch?v=PZRI1IfStY0)


3. **C Preprocessor:** The preprocessor is a powerful tool. This tutorial explains how `#include`, `#define` (for macros), and conditional compilation directives work, enabling you to write more efficient and maintainable code.

   * **Recommendation:**  C Programming Tutorial - The C Preprocessor
   * **YouTube Link:** [https://www.youtube.com/watch?v=X6HiYbY3f90&list=PLBlnK6fEyqRhX6r2uhhlubuF5QextdCSM&index=22](https://www.youtube.com/watch?v=X6HiYbY3f90&list=PLBlnK6fEyqRhX6r2uhhlubuF5QextdCSM&index=22)


4. **Pointers:** Pointers are fundamental to C. This video demystifies pointer arithmetic, how to use pointers with arrays and functions, and why they are essential for dynamic memory allocation.

   * **Recommendation:** C Programming Tutorial - Pointers
   * **YouTube Link:** [https://www.youtube.com/watch?v=zuegQmMdy8M&list=PLBln"
